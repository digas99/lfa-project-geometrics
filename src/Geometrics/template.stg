module(name, stat, hasVars, hasList, hasPoints, hasFig) ::= <<
<if(hasList)>
import java.util.List.*;
<endif>
<if(hasVars)>
import java.util.Map.HashMap;
<endif>
<if(hasFigs)>
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.awt.geom.Point2D;
import java.awt.geom.Path2D;
<endif>
<if(hasPoints)>
import java.awt.Point;
<endif>

public class <name> extends <name> implements <name>{
    <if(hasVars)>
    static HashMap \<<String,String>\> vars = new HashMap\<>();
    <endif>
    
    public static main void(String[] args) throws Exception{
        <stats(stats)>;
    }
}
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

conditional(stat, var, stat_true, stat_false) ::= <<
<stats(stat)>
if(<var>){
    <stat_true>
}
<if(stat_false)>
else{
    <stat_false>
}
<endif>
>>

declList(type, var) ::= <<
List \<<type>\> <var> = new List\<>();
>>

declVar(type, var, value) ::= <<
<type> <var><if(value)> = <value><endif>;
>>

declFinalVar(type, var, value) ::= <<
final <type> <var><if(value)> = <value><endif>;
>>

declPrivVar(type, var, value) ::= <<
private <type> <var><if(value)> = <value><endif>;
>>

declNewtypeVar(type, var, value) ::= <<
<type> <var> = new <type>(<if(value)><value><endif>);

add_to_list(var, value) ::= <<
<var>.add(<value>);
>>

remove_from_list(var, value) ::= <<
<var>.remove(<value>);
>>

add_to_map(var, varMap, value) ::= <<
<var> = <varMap>.put(<var>, <var>);

get_from_map(type, var, varMap, value) ::= <<
<type> <var> = <varMap>.get(<value>);
>>

call_func(name, var) ::= <<
<name>(<var>);
>>

call_func2(var, name) ::= <<
<var>.<name>(<var>);
>>

declFunc(type, name, var) ::= <<
public <type> <name>(<type> <var>){
    <stats(stat)>
}

loop(stat, conditional) ::= <<
while(<conditional>){
    <stats(stat)>
}
>>

fillFig(value) ::= <<
.fill(<value>);
>>

paintComp(value) ::= <<
.paintComponent(<value>);
>>

setPaint(value) ::= <<
.setPaint(<value>);
>>

translate(var) ::= <<
.translate((int)<var>.getCenterX(), (int)<var>.getCenterY);
>>

setColor(value, type) ::= <<
.setColor(new <type>(<value>,<value>,<value>));
>>

creteContainer(name, var) ::= <<
Graphics2D <name> = (Graphics2D)var.create();
>>

dispose() ::= <<
.dispose();
>>

createCircle(name, value, type) ::= <<
Shape <name> = new Ellipse2D.Float(<value>, <value>, <value>, <value>);
>>

intersects(value) ::= <<
.intersects(<value>);
>>

module(name, stat, hasVars, hasList, hasPoints, hasMath) ::= <<
<if(hasList)>
import java.util.List.*;
<endif>
<if(hasVars)>
import java.util.HashMap;
<endif>
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.awt.geom.Point2D;
import java.awt.geom.Path2D;
<if(hasMath)>
import java.Math.*;
<endif>
import structures.*;
public class <name> extends JPanel implements ActionListener{
    <if(hasVars)>
    static HashMap \<String,Figure\> varsFigure = new HashMap\<>();
    static HashMap \<String,String>\> varsLabel = new HashMap\<>();
    static HashMap \<String,Double\> varsNumber = new HashMap\<>();
    static HashMap \<String,Time>\> varsTime = new HashMap\<>();
    static HashMap \<String,Angle\> varsAngle = new HashMap\<>();
    static HashMap \<String,Point\> varsPoint = new HashMap\<>();
    <endif>

    public static void main(String[] args) throws Exception{
        <stats(stat)>
    }
}
>>

func_paint(stat1, stat2, board_collision) ::= <<
public void paint(Graphics g){
    super.paintComponent(g);
    <stats(stat)>

    timer.start();
    
    @Override
    public void actionPerformed(ActionEvent e){
        <stats(stat)>

        <if(board_collision)><board_collision><endif>
    }
    repaint();
}
>>

board_collision() ::= <<
if(xRedSquare >= Length_Board-100){
    velRedSquare = velRedSquare * -1;
    velPurpleBlackSquare = velPurpleBlackSquare * -1;
    velGreenCircle  = velGreenCircle  * -1;
    velRedCircle = velRedCircle * -1;

}else if( xPurpleBlackSquare >= Width_Board-100){
    velRedSquare = velRedSquare * -1;
    velPurpleBlackSquare = velPurpleBlackSquare * -1;
    velGreenCircle  = velGreenCircle  * -1;
    velRedCircle = velRedCircle * -1;

}else if(xGreenCircle >= Width_Board-100){
    velRedSquare = velRedSquare * -1;
    velPurpleBlackSquare = velPurpleBlackSquare * -1;
    velGreenCircle  = velGreenCircle  * -1;
    velRedCircle = velRedCircle * -1;

}else if(xRedCircle >= Length_Board-100){
    velRedSquare = velRedSquare * -1;
    velPurpleBlackSquare = velPurpleBlackSquare * -1;
    velGreenCircle  = velGreenCircle  * -1;
    velRedCircle = velRedCircle * -1;
}
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

draw(id) ::= <<
.add(<id>);
>>

declVar(type, var, value, stat) ::= <<
<if(stat)><stats(stat)><endif>
<type> <var><if(value)> = <value><endif>;
>>

declList(type, var) ::= <<
List \<<type>\> <var> = new List\<>();
>>

loop(stat, conditional) ::= <<
while(<conditional>){
    <stats(stat)>
}
>>

conditional(stat, var, stat_true, stat_false, break) ::= <<
<if(stat)><stats(stat)><endif>
if(<var>){
    <stat_true>
}
<if(stat_false)>
else{
    <stat_false>
    <if(break)>
    break;
    <endif>
}
<endif>
>>

container(id, var) ::= <<
Graphics2D <var> = (Graphics2D).<id>.create();
>>

call_func(name, values) ::= <<
<name>(<values>);
>>

change_var(var, value) ::= <<
<var> = <value>;
>>

add_to_list(var, value) ::= <<
<var>.add(<value>);
>>

remove_from_list(var, value) ::= <<
<var>.remove(<value>);
>>

add_to_map(var, varMap, value, type) ::= <<
<declVar(type, var, value)>
<varMap>.put(<var>, <value>);
>>

get_from_map(type, var, varMap, key) ::= <<
<type> <var> = <varMap>.containsKey(<key>) ? <varMap>.get(<key>) : null;
>>

call_func2(var, name) ::= <<
<var>.<name>(<var>);
>>

declFunc(type, name, var) ::= <<
public <type> <name>(<type> <var>){
    <stats(stat)>
}
>>

center(var) ::= <<
Point2D center = new Point2D((int) <var>.getCenterX(), <var>.getCenterY());
>>

number(value)::= <<
<value>;
>>

to_the_power(type, var, value1, value2)::= <<
<type> <var> = Math.pow(<value1>, <value2>);
>>

calcPoints(var, type, p1, p0) ::= <<
Point <var> = <type>(<p0>, <p1>);
>>

not_bool(value) ::= <<
!<value>
>>
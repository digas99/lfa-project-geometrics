module(name, stat, boardName, posMapEntries, anglesMapEntries, linesMapEntries) ::= <<
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.awt.geom.Point2D;
import java.awt.geom.Path2D;
import org.antlr.v4.runtime.misc.Pair;
import java.lang.Math;

import structures.*;
public class <name> extends JPanel implements ActionListener,KeyListener{
    static final int Width_Board = 1000;
    static final int Height_Board = 1000;
    List\<Figure> figures = new ArrayList\<>();

    public void paint(Graphics g){
        super.paintComponent(g);

        g.drawString("P - play animation",10,10);
        g.drawString("S - stop animation",8,25);

        <stats(stat)>
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        if(key == KeyEvent.VK_S){
        timer.stop();
        }
        if(key == KeyEvent.VK_P){
        timer.start(); 
        }  
    }

    @Override
    public void keyReleased(KeyEvent e){
    }

    @Override
    public void keyTyped(KeyEvent e){
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

    public static void main(String[] args) throws Exception{
        <name> n = new <name>();
        JFrame frame1 = new JFrame();
        frame1.setTitle(<boardName>);
        frame1.setSize(new Dimension(Width_Board,Height_Board));
        frame1.addKeyListener(n);
        frame1.add(n);
        frame1.setLocationRelativeTo(null);
        frame1.setVisible(true);
        frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    } 

    <if(posMapEntries)>Map\<String,Pair\<Double, Double>\> positions = Map.ofEntires(posMapEntries);<endif>
    <if(anglesMapEntries)>HashMap\<String,structures.Angle> angles = Map.ofEntires(anglesMapEntries);<endif>
    <if(linesMapEntries)>HashMap\<String,Pair\<structures.Point, structures.Point>\> lines = Map.ofEntires(linesMapEntries);<endif>
}

>>

callMain(class, args, stat) ::= <<
String[] <class>MainArgs = {<args>};
<class>.main(<class>MainArgs);
<if(stat)><stats(stat)><endif>
>>

figureProperty(var,action,value) ::= <<
<var>.<action>(<value>);
>>

figureMaking(type,stat,var,properties)::= <<
Graphics2D <var>Graphics = (Graphics2D) g.create();
structures.<type> <var>Figure = new structures.<type>("<var>");
<properties>
<if(stat)><stats(stat)><endif>
>>

rectangleMaking(var)::= <<

Rectangle2D <var> = new Rectangle2D.Double(positions.get("<var>").a,positions.get("<var>").b,
                                           <var>Figure.width(),<var>Figure.height());
java.awt.Rectangle <var>Bounds = <var>.getBounds(); 
<var>Graphics.setColor(new Color(<var>Figure.color().rgb().toString()));
<var>Graphics.setStroke(new BasicStroke(<var>Figure.thickness()));
<var>Graphics.translate(<var>.getCenterX(),<var>.getCenterY());
<var>Graphics.rotate(angles.get("<var>").degree());
<var>Graphics.translate(-<var>.getCenterX(),-<var>.getCenterY());

>>

circleMaking(var)::= <<

Shape <var> = new Ellipse2D.Double(positions.get("<var>").a,positions.get("<var>").b,
                                   <var>Figure.diameter(),<var>Figure.diameter());
java.awt.Rectangle <var>Bounds = <var>.getBounds(); 
<var>Graphics.setColor(new Color(<var>Figure.color().rgb().toString()));
<var>Graphics.setStroke(new BasicStroke(<var>Figure.thickness()));
<var>Graphics.translate(<var>.getCenterX(),<var>.getCenterY());
<var>Graphics.rotate(angles.get("<var>").degree());
<var>Graphics.translate(-<var>.getCenterX(),-<var>.getCenterY());

>>

lineMaking(var)::= <<

Shape <var> = new Line2D.Double(positions.get("<var>").a.x(),positions.get("<var>").b.y(),
                              endPositionsLine.get("<var>").a.x(),endPositionsLine.get("<var>".b.y()));
java.awt.Rectangle <var>Bounds = <var>.getBounds(); 
<var>Graphics.setColor(new Color(<var>Figure.color().rgb().toString()));
<var>Graphics.setStroke(new BasicStroke(<var>Figure.thickness()));
<var>Graphics.translate(<var>.getCenterX(),<var>.getCenterY());
<var>Graphics.rotate(angles.get("<var>").degree());
<var>Graphics.translate(-<var>.getCenterX(),-<var>.getCenterY());

>>



figureColorSetter(var, funcName, hexcode, r, g, b, stat) ::= <<
<if(stat)><stat><endif>
<var>.set<funcName>(new Color(<if(r)>new RGB(<r>,<g>,<b>)<endif><if(hexcode)><hexcode><endif>));
>>

figureSetter(var, funcName, value, stat) ::= <<
<if(stat)><stat><endif>
<var>.set<funcName>(<value>);
>>

figurePointSetter(var, funcName, x, y, stat) ::= <<
<if(stat)><stat><endif>
<var>.set<funcName>(new Point(<x>, <y>));
>>

figureAngleSetter(var, funcName, angle, stat) ::= <<
<if(stat)><stat><endif>
<var>.set<funcName>(<angle>);
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

stats_line(stat) ::= <<
<if(stat)><stat><endif>
>>

declVar(type, var, value, stat) ::= <<
<if(stat)><stats(stat)><endif>
<type> <var><if(value)> = <value><endif>;
>>

declList(type, var) ::= <<
List \<<type>\> <var> = new List\<>();
>>

loop(stat, conditional) ::= <<
while(<conditional>){
    <stats(stat)>
}
>>

conditional(stat, var, stat_true, stat_false, break) ::= <<
<if(stat)><stats(stat)><endif>
if(<var>){
    <stat_true>
}
>>

container(id, var, stat) ::= <<
Graphics2D <var> = (Graphics2D).<id>.create();
<if(stats(stat))><stats(stat)><endif>
>>

call_func(name, values) ::= <<
<name>(<values>);
>>

change_var(var, value) ::= <<
<var> = <value>;
>>

add_to_list(var, varList, value, type) ::= <<
<if(type)><declVar(type, var, value, "")><endif>
<varList>.add(<var>);
>>

remove_from_list(var, value) ::= <<
<var>.remove(<value>);
>>

add_to_map(var, varMap, value, type) ::= <<
<if(type)><declVar(type, var, value, "")><endif>
<varMap>.put(<var>, <value>);
>>

get_from_map(type, var, varMap, key) ::= <<
<type> <var> = <varMap>.containsKey(<key>) ? <varMap>.get(<key>) : null;
>>

center(var) ::= <<
Point2D center = new Point2D((int) <var>.getCenterX(), <var>.getCenterY());
>>

to_the_power(type, var, value1, value2, stat)::= <<
<if(stat)><stats(stat)><endif>
<type> <var> = Math.pow(<value1>, <value2>);
>>

calcPoints(var, type, p1, p0) ::= <<
Point <var> = <type>(<p0>, <p1>);
>>

not_bool(value) ::= <<
!<value>
>>

print(stat, value) ::= <<
<if(stat)><stats(stat)><endif>
System.out.println(<value>);
>>

draw(var) ::= << 
<var>.draw();
>>

filled(var, fig) ::= <<
<var>.fill(<fig>);
>>
